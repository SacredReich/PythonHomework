# ПЕРВЫЙ СЕМИНАР
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 2: Найдите сумму цифр трехзначного числа.
# print("\033[H\033[J")


# def numbersSumm():
#     numb = int(input('Введите трехзначное число:  '))
#     if (999 > numb > 99):
#         first = numb // 100
#         second = numb // 10 % 10
#         third = numb % 10
#         print(f"{numb} -> {first + second + third} ({first} + {second} + {third})")
#     else:
#         print("Число не является трехзначным!")
#         return numbersSumm()


# numbersSumm()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 4: Петя, Катя и Сережа делают из бумаги журавликов. Вместе они сделали S журавликов. Сколько журавликов сделал каждый ребенок, если известно, что Петя и Сережа сделали одинаковое количество журавликов, а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?
# print("\033[H\033[J")


# def findPartssOfSix():
#     summ = int(
#         input("Введите общее количество сделанных журавликов, кратное 6:  "))
#     if (summ % 6 == 0):
#         print(
#             f"{summ} -> {summ//6*2} (Катя), {summ//6} (Сережа), {summ//6} (Петя)")
#     else:
#         (print("Введенное число не кратно 6"))
#         return findPartssOfSix()


# findPartssOfSix()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались за проезд и получали билет с номером. Счастливым
# билетом называют такой билет с шестизначным номером, где сумма первых трех цифр равна сумме последних трех.
# Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать программу, которая проверяет счастливость билета.

#       print("\033[H\033[J")
# def findPartssOfSix():
#     numb = (input('Введите номер билета:  '))
#     if (len(numb) == 6):
#         firstPart = (int(numb[0]) + int((numb[1])) + int(numb[2]))
#         lastPart = (int(numb[3]) + int((numb[4])) + int(numb[5]))
#         if firstPart == lastPart:
#             print(f"{numb} -> Yes")
#         else:
#             print(f"{numb} -> No")
#     else:
#         print("Некорректный номер")
#         return findPartssOfSix()


# findPartssOfSix()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 8: Требуется определить, можно ли от шоколадки размером n × m долек отломить k долек,
# если разрешается сделать один разлом по прямой между дольками (то есть разломить шоколадку на два прямоугольника).

# print("\033[H\033[J")


# def chocolateSlise():

#     aSide = int(input("Введите длину первой стороны шоколадки: "))
#     bSide = int(input("Введите длину второй стороны шоколадки: "))
#     xSlise = int(input
#                  ("Введите желаемое количество долек прямого разлома шоколадки: "))
#     if (aSide == 1 and bSide == 1):
#         print("Такую шоколадку аккуратно не сломать!")
#         return chocolateSlise()
#     elif (aSide <= 0 or bSide <= 0):
#         print("Неправильные значения, таких шоколадок быть не может!")
#         return chocolateSlise()
#     else:

#         if (aSide > bSide):
#             if (xSlise % aSide == 0 or xSlise % bSide == 0 and aSide*bSide-bSide >= xSlise >= bSide):
#                 print(
#                     f"Шоколадка ({aSide}*{bSide}), дольки в отломанном кусочке ({xSlise}) -> yes")
#             else:
#                 print(
#                     f"Шоколадка ({aSide}*{bSide}), дольки в отломанном кусочке ({xSlise}) -> no")
#         else:
#             if (xSlise % aSide == 0 or xSlise % bSide == 0 and aSide*bSide-aSide >= xSlise >= aSide):
#                 print(
#                     f"Шоколадка ({aSide}*{bSide}), дольки в отломанном кусочке ({xSlise}) -> yes")
#             else:
#                 print(
#                     f"Шоколадка ({aSide}*{bSide}), дольки в отломанном кусочке ({xSlise}) -> no")


# chocolateSlise()
# # ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ВТОРОЙ СЕМИНАР
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом. Определите минимальное число монеток, которые нужно перевернуть, чтобы все монетки были повернуты
# вверх одной и той же стороной. Выведите минимальное количество монет, которые нужно перевернуть.
# print("\033[H\033[J")
# coins = int(input('Введите количество монет: '))
# eagles = 0
# count = 1
# for i in range(coins):
#     money = int(
#         input(f'Если {count} монета - орел, то введите 1. Если решка - 0: '))
#     if (money == 1):
#         eagles += 1
#     count += 1
# if (eagles == coins):
#     print('Все монеты - орлы, ничего делать не нужно.')
# elif (eagles == 0):
#     print('Все монеты - решки, ничего делать не нужно.')
# elif (eagles >= coins//2+1):
#     print(f'Переверните {eagles} монет с орлом, и все монеты станут орлами.')
# elif (eagles <= coins//2):
#     print(
#         f'Переверните {coins-eagles} монет с решкой, и все монеты станут решками.')
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике. Он задумывает два натуральных числа X и Y(X, Y≤1000), а Катя должна их отгадать.
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
# print("\033[H\033[J")


# def findNumbers():
#     done = 0
#     summ = int(input('Введите сумму чисел: '))
#     product = int(input('Введите произведение чисел: '))
#     for i in range(1, 1001):
#         for j in range(1, 1001):
#             if (summ == i+j and product == i*j):
#                 print(f'Загаданные числа найдены: {i} и {j}')
#                 done = 1
#                 return 1
#     if (done == 0):
#         return 0


# answer = findNumbers()
# while (answer == 0):
#     print('Неверные данные!')
#     findNumbers()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 14: Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.

# print("\033[H\033[J")

# limit = int(input('Введите число: '))
# count = 0
# while (2**count <= limit):
#     print(2**count)
#     count += 1
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ТРЕТИЙ СЕМИНАР
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N]. Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X
# print("\033[H\033[J")


# def howManyTimesFind():
#     size = int(input("Введите количество элементов массива: "))
#     print("Введите значения элементов массива (через пробел): ")
#     massive = list(map(int, (input().split())))

#     if (len(massive) != size):
#         print('Количество введенных элементов не совпадает с заданным размером массива!')
#         return howManyTimesFind()

#     else:
#         x = int(input("Введите искомый элемент "))
#         find = 0

#         for i in range(len(massive)):
#             if massive[i] == x:
#                 find += 1
#     print(f'Элемент {x} встречается {find} раз')


# howManyTimesFind()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 18: Требуется найти в массиве A[1..N] самый близкий по
# величине элемент к заданному числу X. Пользователь в первой строке
# вводит натуральное число N – количество элементов в массиве. В
# последующих строках записаны N целых чисел Ai
# . Последняя строка содержит число X

# print("\033[H\033[J")
# massive = [0]*int(input("Введите количество элементов массива: "))
# print('Введите значение элементов массива: ')
# for i in range(len(massive)):
#     print(f'{i+1})')
#     massive[i] = int(input())
# print(massive)

# x = int(input("Введите число, с которым будем сравнивать элементы списка: "))
# min = (x - massive[0])
# index = 0
# for i in range(1, len(massive)):
#     count = (x - massive[i])
#     if count < min:
#         min = count
#         index = i
# print(
#     f'Число {massive[index]} в списке наиболее близко по величине к числу {x}')
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 20: В настольной игре Скрабл (Scrabble) каждая буква имеет определенную
# ценность. В случае с английским алфавитом очки распределяются так:
# ● A, E, I, O, U, L, N, S, T, R – 1 очко;
# ● D, G – 2 очка;
# ● B, C, M, P – 3 очка;
# ● F, H, V, W, Y – 4 очка;
# ● K – 5 очков;
# ● J, X – 8 очков;
# ● Q, Z – 10 очков.

# А русские буквы оцениваются так:
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# ● Д, К, Л, М, П, У – 2 очка;
# ● Б, Г, Ё, Ь, Я – 3 очка;
# ● Й, Ы – 4 очка;
# ● Ж, З, Х, Ц, Ч – 5 очков;
# ● Ш, Э, Ю – 8 очков;
# ● Ф, Щ, Ъ – 10 очков

# print("\033[H\033[J")

# dictionary = {1: "AEIOULNSTRАВЕИНОРСТ",
#               2: "DGДКЛМПУ",
#               3: "BCMPБГЁЬЯ",
#               4: "FHVWYЙЫ",
#               5: "KЖЗХЦЧ",
#               8: "JXШЭЮ",
#               10: "QZФЩЪ"}
# word = input("Введите слово: ").upper()
# summ = 0
# for i in word:
#     for k, v in dictionary.items():
#         if i in v:
#             summ += k
# print(f"Стоимость слова: {summ} очков.")
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ЧЕТВЕРТЫЙ СЕМИНАР
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
# print("\033[H\033[J")


# def ListsWithOrder():
#     first = int(input('Введите количество чисел для первого набора: '))
#     second = int(input('Введите количество чисел для второго набора: '))
#     list1 = input('Введите элементы первого набора через пробел: ').split()
#     list2 = input('Введите элементы второго набора через пробел: ').split()
#     if (len(list1) != first or len(list2) != second):
#         print('Вы ввели неверные данные!')
#         return ListsWithOrder()
#     else:
#         collect1 = set(sorted(list1))
#         collect2 = set(sorted(list2))
#         print("\033[H\033[J")
#         print(*collect1.intersection(collect2))


# ListsWithOrder()
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности.
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.
# print("\033[H\033[J")
# n = int(input("Введите количество кустов черники на грядке: "))

# lst = list(map(int, input(
#     'введите количество ягод на каждом кусте через пробел: ').split()))
# maxsum = 0

# for i in range(n):
#     sbor = sum(lst[i:i+3])
#     print(sbor)
#     if sbor > maxsum:
#         maxsum = sbor
#     if lst[-2]+lst[-1]+lst[0] > maxsum:
#         maxsum = lst[-2]+lst[-1]+lst[0]
#     if lst[-1]+lst[0]+lst[1] > maxsum:
#         maxsum = lst[-1]+lst[0]+lst[1]
# print(maxsum)
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ПЯТЫЙ СЕМИНАР
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
